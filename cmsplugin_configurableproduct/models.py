"""
  Configurable Product DjangoCMS plugin Models

  ## Templates

    Templates are stored in :

        cms/plugins/configurable_product/
            /product-types/
                /base.html
                /*.html
            /product-list/
                /base.html
                /*.html

  ### base.html

    base.html in each plugin subdir is used to load the selected template
    chosen in the administration interface.

    template choices are generated by scanning for the relative directory
    path above. So if any of your apps have that path contained therein
    which also contain html files, then they will be used.


  ## Product Types

    If you want to filter/exclude based on a field name, the provide that
    name in the verb list separated by colons.

    The presence of any such fields whose name matches either of the listed
    words will be actioned upon.

    To determine what action to take, select Show or Hide from the
    filter_action dropdown.

"""
import os
from os.path import join, getsize

from django.db import models
from django.template.loader import get_template
from django.template.loaders.app_directories import app_template_dirs
from django.core.exceptions import ImproperlyConfigured
from django.utils.importlib import import_module

from base.lib.choice_generator import DynamicChoice

from cms.models.pluginmodel import CMSPlugin


class DynamicTemplateChoices(DynamicChoice):

     def __init__(self, path=None, *args, **kwargs):
        super(DynamicTemplateChoices, self).__init__(self, *args, **kwargs)
        self.path = path

     def generate(self,*args, **kwargs):
        choices = list()

        for template_dir in app_template_dirs:
          results = walkdir(os.path.join(template_dir, self.path),
              self.path, ".html", "base")
          if results:
              choices += results

        return choices

def walkdir(path, relative_path=None, include_filter=None, exlude_filter=None):
    output = list()

    if not os.path.exists(path):
        return None

    for root, dirs, files in os.walk(path):

        if include_filter:
            files = filter(lambda x: include_filter in x, files)

        if exlude_filter:
            files = filter(lambda x: not exlude_filter in x, files)

        for item in files :
            output += ( (
              os.path.join(relative_path, item),
              os.path.splitext(item)[0],
            ),)

        for item in dirs :
            output += walkdir(os.path.join(root, item),
              relative_path, include_filter, exlude_filter)
    return output



class CProductTypesPlugin(CMSPlugin):
    """ Stores options for cmsplugin that shows lists of ProductTypes
    """

    TEMPLATE_PATH = os.path.join("shop", "plugins",
        "configurable_product", "product-types")
    TEMPLATE_CHOICES = DynamicTemplateChoices(path=TEMPLATE_PATH)

    categories = models.ManyToManyField('configurableproduct.ProductType',
      blank=True, null=True,
      help_text="""Restrict the output list to these selected categories.
      if none are selected then all will be shown.""")

    show_category_icon = models.BooleanField(default=False,
      help_text="Display the icon for each category?")

    hide_empty_categories = models.BooleanField(default=True,
      help_text="Hide product types that have no products?")

    template = models.CharField(choices=TEMPLATE_CHOICES,
      max_length=256, blank=True, null=True,
      help_text="""Select a template to render this
      list. Templates are stored in : {0}""".format(TEMPLATE_PATH))

    def __unicode__(self):
        return U"Types: {0}".format(self.categories.all())


class CProductsPlugin(CMSPlugin):
    """ Stores Options to display list of products from certain ProductTypes
    """
    FILTER_ACTIONS = (
        ("show", "Filter"),
        ("hide", "Exclude")
      )
    TEMPLATE_PATH = os.path.join("shop", "plugins",
      "configurable_product", "product-list")
    TEMPLATE_CHOICES = DynamicTemplateChoices(path=TEMPLATE_PATH)

    categories = models.ManyToManyField('configurableproduct.ProductType',
      help_text="""Restrict the output list to these selected categories.
      if none are selected then all will be shown.""")
    hide_empty_categories = models.BooleanField(default=True)

    filter_product_attributes = models.CharField(max_length=256,
      blank=True, null=True,
      help_text="""Comma separated list of product
      field names and values to check for. ie :
        on_sale, is_preorder, holds_litres""")

    filter_action = models.CharField(max_length=32,
      blank=True, null=True, choices = FILTER_ACTIONS,
      help_text="How to treat the filter verbs?")

    template = models.CharField(choices=TEMPLATE_CHOICES,
      max_length=256,
      blank=True, null=True, help_text="""Select a template to render this
      list. Templates are stored in : {0}""".format(TEMPLATE_PATH))

    def get_template_choices(self):
        choices = list()
        for template_dir in app_template_dirs:
          choices += walkdir(os.path.join(template_dir,self.TEMPLATE_PATH),
            ".html", "base")
        return choices

    def __unicode__(self):
        return U"Types: {0}".format(",".join([ ctype.name for ctype in self.categories.all()]))
